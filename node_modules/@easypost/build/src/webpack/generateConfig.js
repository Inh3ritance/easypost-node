import path from 'path';

import * as plugins from './plugins';
import jsRule from './rules/js';

export const CWD = process.cwd();
export const cwd = (...files) => path.join(CWD, ...files);

export const DEFAULT_ENTRY = cwd('src/index.js');
export const DEFAULT_OUTPUT_DIR = cwd('public');

export const OUTPUT_FILENAME = '[name]-[hash].js';
export const OUTPUT_SOURCE_MAP_FILENAME = '[file].map';
export const OUTPUT_CHUNK_FILENAME = '[id]-[chunkhash].js';

export const EXTERNAL_SOURCE_MAP = 'source-map';

export const EXTENSIONS = [
  '.js',
  '.json',
];

export const PRODUCTION_MODE_PLUGINS = [
  plugins.minify(),
];

export const DEVELOPMENT_MODE_PLUGINS = [
];

export const absolutify = entry => {
  if (typeof entry === 'string') {
    return cwd(entry);
  }

  return Object.keys(entry).reduce((e, key) => ({
    ...e,
    [key]: cwd(entry[key]),
  }), {});
};

export default function generateConfig({
  entry = DEFAULT_ENTRY,
  outputDir = DEFAULT_OUTPUT_DIR,
  mode = process.env.NODE_ENV || 'development',
  sourcePath = 'src',
  ruleOptions = {},
}) {
  const isDev = mode === 'development';
  const additionalPlugins = isDev ? DEVELOPMENT_MODE_PLUGINS : PRODUCTION_MODE_PLUGINS;

  return {
    mode,
    entry: absolutify(entry),
    context: cwd(sourcePath),

    cache: isDev,
    devtool: isDev ? EXTERNAL_SOURCE_MAP : undefined,

    resolve: {
      extensions: EXTENSIONS,
      modules: [
        cwd(sourcePath),
        cwd('node_modules'),
      ],
    },

    module: {
      rules: [
        jsRule(...(ruleOptions.js || [])),
      ],
    },

    output: {
      path: cwd(outputDir),
      filename: OUTPUT_FILENAME,
      sourceMapFilename: OUTPUT_SOURCE_MAP_FILENAME,
      chunkFilename: OUTPUT_CHUNK_FILENAME,
    },

    plugins: [
      ...additionalPlugins,
    ],
  };
}
