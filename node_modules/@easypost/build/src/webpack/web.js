import { merge } from 'lodash/object';

import filesRule from './rules/files';
import scssRule from './rules/scss';

import scssPlugin from './plugins/scss';
import manifestPlugin from './plugins/manifest';
import processEnvPlugin from './plugins/processEnv';

import generateConfig, { cwd } from './generateConfig';

export const EXTENSIONS = [
  '.js',
  '.json',
  '.jsx',
  '.css',
  '.scss',
];

export default ({
  entry,
  outputDir,
  scssDir,
  publicDir = outputDir,
  mode = process.env.NODE_ENV,
  vendorFile = 'vendor',
  cssFile = 'styles',
  ruleOptions = {},
}) => {
  const defaultConfig = generateConfig({ entry, outputDir, mode, ruleOptions });

  return merge(defaultConfig, {
    optimization: {
      splitChunks: {
        cacheGroups: {
          commons: {
            test: /node_modules/,
            name: vendorFile,
            chunks: 'all',
          },
          styles: {
            test: /\.css$/,
            name: cssFile,
            chunks: 'all',
            enforce: true,
          },
        },
      },
    },

    resolve: {
      extensions: EXTENSIONS,
    },

    output: {
      path: cwd(outputDir),
      publicPath: `${publicDir}/`,
    },

    module: {
      rules: [
        ...defaultConfig.module.rules,
        scssRule(...(ruleOptions.scss || [scssDir])),
        filesRule(...(ruleOptions.files || [outputDir])),
      ],
    },

    plugins: [
      ...defaultConfig.plugins,
      manifestPlugin(),
      scssPlugin(),
      processEnvPlugin(),
    ],
  });
};
