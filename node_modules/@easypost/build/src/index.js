import path from 'path';
import yargs from 'yargs';
import { spawn } from 'child_process';

/* eslint no-console: 0, consistent-return: 0 */
export function logResult(err, stats) {
  if (err) {
    return console.error(err);
  }

  if (err) {
    console.error(err.stack || err);
    if (err.details) {
      console.error(err.details);
    }
    return;
  }

  const info = stats.toJson();

  if (stats.hasErrors()) {
    info.errors.forEach(e => console.error(e));
  }

  if (stats.hasWarnings()) {
    info.warnings.forEach(e => console.warn(e));
  }

  console.log(stats.toString({ colors: true }));
}

export const build = args => {
  const pack = spawn(path.join(process.cwd(), 'node_modules', '.bin', 'webpack'), [
    ...(args.watch ? ['--watch'] : []),
    '--config',
    args.config,
  ], {
    cwd: process.cwd(),
    stdio: 'inherit',
  });

  pack.on('close', code => process.exit(code));
};

export const serve = () => {
  spawn(path.join(process.cwd(), 'node_modules', '.bin', 'webpack-dev-server'), [], {
    cwd: process.cwd(),
    stdio: 'inherit',
  });
};

export const audit = args => {
  const auditProcess = spawn(path.join(process.cwd(), 'node_modules', '.bin', 'npm-audit-ci'), [
    `-${args.level}`,
  ], {
    cwd: process.cwd(),
    stdio: 'inherit',
  });

  auditProcess.on('close', code => process.exit(code));
};

export default yargs
  .usage('ep-node-build <command> [options]')
  .command(['build', '$0'], 'Builds current project', {
    watch: {
      alias: 'w',
      default: false,
    },
    config: {
      default: path.join(process.cwd(), 'webpack.config.babel.js'),
    },
  }, build)
  .command(
    'serve',
    'Runs webpack-dev-server for live reload',
    y => y,
    serve,
  )
  .command(
    'audit',
    'Audits security vulnerabilities; exits with failure if any of [level] are found', {
      level: {
        alias: 'l',
        default: 'c',
        demandOption: true,
        choices: ['l', 'm', 'h', 'c'],
      },
    },
    audit,
  )
  .alias('h', 'help')
  .help('h')
  .argv;
